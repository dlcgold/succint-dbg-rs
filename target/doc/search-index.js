var searchIndex = JSON.parse('{\
"succint_dbg_rs":{"doc":"Draft implementation of succint de Bruijn Graph of Alex …","t":[3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["SDbg","backward","borrow","borrow_mut","edge","edge_to_node","findsymbol","first_edge","forward","from","from_subset","fvec","incoming","indegree","into","is_in_subset","kmersize","label","last","last_edge","n_nodes","neg","new","new_from_string","node_range","outdegree","outgoing","print","rschar","rscharneg","rslast","successors","to_dot","to_dot_no_dollar","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip"],"q":["succint_dbg_rs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["struct to implement succint dbg with","return index of the first edge that points to the node …","","","return the vec of edges (as explained in Bowe’s …","change edge index in node index","return the last char at index F array","return first edge from a node","return index of the last edge of the node pointed to by …","","","return the F array (as explained in Bowe’s research)","return predecessor node starting with a symbol, that has …","return number of incoming edges to a node (as explained …","","","return the chosen k for kmers","return label of a node (as explained in Bowe’s research)","return the last array (as explained in Bowe’s research)","return last edge from a node","return the amount of nodes in the succint dbg","return the bool array that it specifies if edge in marked …","create new succint dbg from a set of strings","create new succint dbg from a string","return range of edges from a node","return number of outgoing edges from a node (as explained …","return index obtained from a node, follow the edge …","print main structires of succint dbg","return the map with the bitvec of a char, char used by …","return the map with the bitvec of a char marked as neg, …","return the map with the bitvec of the last array with …","return vec with index of successors from a node (as …","print to file of the .dot of tne graph","print to file of the .dot of tne graph without $ nodes","","","","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[null,[[["isize",15]],["isize",15]],[[]],[[]],[[],["vec",3]],[[["isize",15]],["isize",15]],[[["isize",15]],["char",15]],[[["isize",15]],["isize",15]],[[["isize",15]],["isize",15]],[[]],[[]],[[],["vec",3]],[[["isize",15],["char",15]],["isize",15]],[[["isize",15]],["isize",15]],[[]],[[],["bool",15]],[[],["u32",15]],[[["isize",15]],["string",3]],[[],["vec",3]],[[["isize",15]],["isize",15]],[[],["usize",15]],[[],["vec",3]],[[["vec",3],["u32",15]]],[[["u32",15],["string",3]]],[[["isize",15]]],[[["isize",15]],["isize",15]],[[["isize",15],["char",15]],["isize",15]],[[]],[[],["hashmap",3]],[[],["hashmap",3]],[[],["rankselect",3]],[[["isize",15]],[["isize",15],["vec",3]]],[[["str",15]]],[[["str",15]]],[[],["option",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[3,"SDbg"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};